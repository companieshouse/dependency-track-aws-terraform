#!/bin/bash

IFS='' read -d '' -r help_text <<EOF
$0

Populates dependency track with SBOMs for the supplied repositories

USAGE:
$0 [FLAGS] <ARGUMENTS>...

FLAGS:
-t <target>: the name of the local fly target to use to submit jobs, must be able to access shared-services (**REQUIRED**)
-c <resources-dir>: path to local repository checked out for ci-concourse-resources
-d <dir>: path to local repository which contains checked out repos

ARGUMENTS
* Repos list file - a file containing a list of repos to generate SBOMs for
  each line contains a different repository name.

EOF

function log() {
  printf -- '[%s] - %s - %s\n' "$(date +'%FT%T%z')" "${1:?Level required}" "${2:?Message required}"
}

# Clones the source of the supplied repo locally using gh or git. When supplied
# with branch in second argument it will check out the named branch
function clone_repo {
  local repo_name="${1:?repo_name required}"
  local branch_name="${2}"
  log 'DEBUG' "cloning ${repo_name}"

  if command -v gh >/dev/null 2>&1; then
    if [[ -z "${branch_name}" ]]; then
      gh repo clone companieshouse/"${repo_name}" "${local_dir}"/"${repo_name}"
    else
      gh repo clone companieshouse/"${repo_name}" "${local_dir}"/"${repo_name}" -- -b "${branch_name}"
    fi
  else
    (
      cd -- "${local_dir}" || exit 1

      if [[ -z "${branch_name}" ]]; then
        git clone git@github.com:companieshouse/"${repo_name}".git
      else
        git clone -b "${branch_name}" git@github.com:companieshouse/"${repo_name}".git
      fi
    )
  fi
}

# Navigates to the supplied repository with name and tries to determine the
# version either from Github release or a tag or failing that the value in the
# version file
function resolve_version() {
  local repository_name="$1"
  (
    cd -- "${local_dir}"/"${repository_name}" || exit 1

    gh release view --json name --jq .name || git describe --tags --abbrev=0 || cat version
  )
}

# Sets the paraneters for the Concourse task as environment variables -
# fly will take the values from the environment variables
function set_parameters() {
  DEP_TRACK_SERVER='((secrets.dependency-track-server))'
  DEP_TRACK_API_KEY='((secrets.dependency-track-api-key))'
  OTHER_CDXGEN_ENV_VARS=""
  DEP_TRACK_PROJ_TAGS="auto-populated;upload-$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
  SEND_TO_DEP_TRACK="true"
  OTHER_CDXGEN_ENV_VARS='ANOTHER_ENV_VAR=yes'

  export DEP_TRACK_SERVER DEP_TRACK_API_KEY SBOM_NAME SPEC_VER
  export DEP_TRACK_PROJ_VER DEP_TRACK_PROJ_TAGS OTHER_CDXGEN_ENV_VARS SEND_TO_DEP_TRACK
}

# attempts to run a no-op task to ensure target is correct
function test_target_is_correct() {
  local return_status=0

  log "DEBUG" 'Testing connection to concourse'

  fly -t "${fly_target}" execute \
    -c "${noop_concourse_task}" >/dev/null || return_status=$?

  if [[ "${return_status}" -eq 0 ]]; then
    log "INFO" 'Concourse access verified'
  fi

  return "${return_status}"
}

while getopts 'c:d:v:t:h' OPT; do
  case "${OPT}" in
  c) concourse_resourses_dir="${OPTARG}" ;;
  d) local_dir="${OPTARG}" ;;
  t) fly_target="${OPTARG}" ;;
  h)
    printf -- '%s\n' "${help_text}"
    exit 0
    ;;
  *)
    printf -- 'Unknown option selected\n' >&2
    exit 1
    ;;
  esac
done

shift "$((OPTIND - 1))"

: "${fly_target:?target required}"

repos_file="${1:?Repos list file required}"

if [[ -z "${local_dir}" ]]; then
  temporary_directory="$(mktemp -d)"
  trap 'rm -rf -- "${temporary_directory}"' EXIT

  local_dir="${temporary_directory}"
elif [[ ! -d "${local_dir}" ]]; then
  log "ERROR" "${local_dir} does not exist" >&2
  exit 1
fi

if [[ -z "${concourse_resourses_dir}" ]]; then
  clone_repo ci-concourse-resources shared-services || exit $?

  create_sbom_concourse_task="${local_dir}"/ci-concourse-resources/tasks/utility/cyclonedx/create-sbom/task.yml
  noop_concourse_task="${local_dir}"/ci-concourse-resources/tasks/utility/do-nothing/task.yml
elif [[ -d "${concourse_resourses_dir}" ]]; then
  create_sbom_concourse_task="$(realpath "${concourse_resourses_dir}")"/tasks/utility/cyclonedx/create-sbom/task.yml
  noop_concourse_task="$(realpath "${concourse_resourses_dir}")"/tasks/utility/do-nothing/task.yml
else
  log "ERROR" "selected concourse-resources directory not found" >&2
  exit 1
fi

if ! test_target_is_correct; then
  log 'ERROR' 'The target supplied is not correct - needs to be able to ' >&2
  log 'ERROR' 'connect to Shared Services Concourse' >&2
  exit 1
fi

set_parameters

while IFS=',' read -r repository repo_type; do
  clone_repo "${repository}"
  code_version="$(resolve_version "${repository}")"

  if [[ "$?" -ne 0 || -z "${code_version}" ]]; then
    log "ERROR" "Could not determine version of ${repository}" >&2

    printf -- '%s=1\n' "${repository}" >>"${repos_file}".out

    continue
  fi

  # Prevent credential leakage
  # shellcheck disable=SC2086
  unset ${!_AWS*}
  # shellcheck disable=SC2086
  unset ${!AWS*}
  # shellcheck disable=SC2086
  unset ${!_DEFAULT_AWS*}

  TYPE="${repo_type}" \
    DEP_TRACK_PROJ_NAME="${repository}" \
    DEP_TRACK_PROJ_VER="${code_version}" \
    fly -t "${fly_target}" \
    execute \
    -c "${create_sbom_concourse_task}" \
    -i source-code="${local_dir}"/"${repository}" \
    -i version="${local_dir}"/"${repository}"

  printf -- '%s=%s\n' "${repository}" "$?" >>"${repos_file}".out

done <"${repos_file}"
